import{_ as a,c as n,a as e,o as t}from"./app-H6ZQ3zEr.js";const o={};function p(i,s){return t(),n("div",null,[...s[0]||(s[0]=[e(`<h1 id="data-manipulation" tabindex="-1"><a class="header-anchor" href="#data-manipulation"><span>Data manipulation</span></a></h1><div class="hint-container tip"><p class="hint-container-title">Estimated time</p><p>1/2 day</p></div><h2 id="http-client" tabindex="-1"><a class="header-anchor" href="#http-client"><span>Http Client</span></a></h2><p>Communicating with a REST API relies on multiple concepts that we&#39;ll cover briefly below:</p><ul><li><a href="https://www.json.org/json-en.html" target="_blank" rel="noopener noreferrer">JSON</a>: a standard data interchange format used a lot in the HTTP messages of REST APIs.</li><li><a href="https://www.redhat.com/en/topics/api/what-is-a-rest-api" target="_blank" rel="noopener noreferrer">REST API</a>: it is a standard communication interface between a client and conforms to the constraints of REST architectural style. In a REST API, HTTP messages are stateless and use JSON data format.</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages" target="_blank" rel="noopener noreferrer">HTTP messages</a>: an http message is a textual message that contains different parts and can be either a request or a response. A request is the HTTP message that the client sends to the server and response is the HTTP message that the server sends to the client in reaction to the request. Both requests and responses have a part called a <em>body</em>. In rest APIs, the body is generally formatted in JSON.</li><li><a href="https://developer.apple.com/documentation/swift/codable" target="_blank" rel="noopener noreferrer">Codable</a>: it is a type that can convert itself into and out of an external representation. It is equivalent to <code>Serializable</code> in Java. This type is helpful if we want to convert an object into an out of a JSON string.</li><li><code>async</code> and <code>await</code>: these keywords are used to call an asynchronous function using a synchronous coding fashion. This means that callbacks are needed no more!</li><li><a href="https://developer.apple.com/documentation/foundation/urlsession" target="_blank" rel="noopener noreferrer">URLSession</a>: The official iOS HTTP client which is part of the Foundation library. This library is not part of the Swift standard library but there is an implementation for non-Apple platforms which is called <a href="https://github.com/apple/swift-corelibs-foundation" target="_blank" rel="noopener noreferrer">swift-corelibs-foundation</a>.</li></ul><p>A typical post request that send and receives a JSON body looks like this:</p><p>First, we define the request and response body objects that conform to <code>(En/De)Codable</code>. We also define the error enum that represents the different errors that can happen.</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token comment">// Codable allows to serialize to JSON</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">RequestBody</span><span class="token punctuation">:</span> <span class="token class-name">Encodable</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> prop<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Codable allows to deserialize to JSON</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ResponseBody</span><span class="token punctuation">:</span> <span class="token class-name">Decodable</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> prop<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Error enum to represent the different errors that can happen</span></span>
<span class="line"><span class="token keyword">enum</span> <span class="token class-name">AppError</span><span class="token punctuation">:</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">case</span> incorrectUrl</span>
<span class="line">  <span class="token keyword">case</span> encodingFailed</span>
<span class="line">  <span class="token keyword">case</span> emptyResponseBody</span>
<span class="line">  <span class="token keyword">case</span> <span class="token function">decodingFailed</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, we define the function that sends the request and receives the response.</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">postBody</span><span class="token punctuation">(</span>requestBody<span class="token punctuation">:</span> <span class="token class-name">RequestBody</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">AppError</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Create the URL object (which can fail if the string in not a valid URL for example)</span></span>
<span class="line">  <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://.../api&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">guard</span> <span class="token keyword">let</span> url <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token function">failure</span><span class="token punctuation">(</span><span class="token punctuation">.</span>incorrectUrl<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// Create the request object</span></span>
<span class="line">  <span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token class-name">URLRequest</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> url<span class="token punctuation">)</span></span>
<span class="line">  <span class="token comment">// Set the method and some headers</span></span>
<span class="line">  request<span class="token punctuation">.</span>httpMethod <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;POST&quot;</span></span></span>
<span class="line">  request<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;application/json&quot;</span></span><span class="token punctuation">,</span> forHTTPHeaderField<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Content-Type&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">  request<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;application/json&quot;</span></span><span class="token punctuation">,</span> forHTTPHeaderField<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Accept&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token comment">// Encode the request body</span></span>
<span class="line">  <span class="token keyword">let</span> encoded <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token class-name">JSONEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>requestBody<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">guard</span> <span class="token keyword">let</span> encoded <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token function">failure</span><span class="token punctuation">(</span><span class="token punctuation">.</span>encodingFailed<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// set the body of the request to a byte array (called Data in Swift)</span></span>
<span class="line">  request<span class="token punctuation">.</span>httpBody <span class="token operator">=</span> encoded</span>
<span class="line">  <span class="token comment">// Send the request and wait for the response. This return an optional tuple (data, response)?</span></span>
<span class="line">  <span class="token keyword">let</span> responseTuple <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token keyword">await</span> <span class="token class-name">URLSession</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> request<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">guard</span> <span class="token keyword">let</span> responseTuple <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token function">failure</span><span class="token punctuation">(</span><span class="token punctuation">.</span>emptyResponseBody<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// Extract the data from the tuple if it is not nil</span></span>
<span class="line">  <span class="token keyword">let</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token omit keyword">_</span><span class="token punctuation">)</span> <span class="token operator">=</span> responseTuple</span>
<span class="line">  <span class="token comment">// Decode the response body into a ResponseBody object</span></span>
<span class="line">  <span class="token keyword">let</span> decoded <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">ResponseBody</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> data<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">guard</span> <span class="token keyword">let</span> decoded <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Try to decode the data into a string to provide more information about the error</span></span>
<span class="line">    <span class="token keyword">let</span> stringBody <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> data<span class="token punctuation">,</span> encoding<span class="token punctuation">:</span> <span class="token punctuation">.</span>utf8<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token function">failure</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">decodingFailed</span><span class="token punctuation">(</span>stringBody <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;Cannot decode to string&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// Return the information we want from the decoded object or the whole object if needed</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>decoded<span class="token punctuation">.</span>prop<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Example of calling the function</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">postBody</span><span class="token punctuation">(</span>requestBody<span class="token punctuation">:</span> <span class="token class-name">RequestBody</span><span class="token punctuation">(</span>prop<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;value&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">switch</span> result <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token keyword">let</span> prop<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Success: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">prop</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">failure</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">decodingFailed</span><span class="token punctuation">(</span><span class="token keyword">let</span> responseBody<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment">// we can use the response body to understand what went wrong in case of decoding error</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Decoding Error: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">responseBody</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">failure</span><span class="token punctuation">(</span><span class="token keyword">let</span> error<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Error: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">error</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="exercises" tabindex="-1"><a class="header-anchor" href="#exercises"><span>Exercises</span></a></h3><ul><li><a href="https://swiftfiddle.com/oyn7ii7dvne37h5uqiqoti5xou" target="_blank" rel="noopener noreferrer">Please click on this link to view the exercise</a></li></ul><details class="hint-container details"><summary>Please open to see the solution(s)</summary><p><a href="https://swiftfiddle.com/7fsyuiu5fzdwtj2dhenxx3x5xm" target="_blank" rel="noopener noreferrer">Solution</a></p></details><ul><li>Show a list of songs fetched from iTunes&#39;s API: <a href="https://itunes.apple.com/search?term=bernard+minet&amp;entity=song" target="_blank" rel="noopener noreferrer">https://itunes.apple.com/search?term=bernard+minet&amp;entity=song</a><ul><li>You can use <a href="https://jsonformatter.org/" target="_blank" rel="noopener noreferrer">jsonformatter.org</a> to format the response of the API and understand its structure.</li><li>A solution is provided by <a href="https://www.hackingwithswift.com/books/ios-swiftui/sending-and-receiving-codable-data-with-urlsession-and-swiftui" target="_blank" rel="noopener noreferrer">hackingwithswift</a>.</li></ul></li></ul><h2 id="data-persistence" tabindex="-1"><a class="header-anchor" href="#data-persistence"><span>Data persistence</span></a></h2><p>Persisting data locally consists of keeping app data after the app has been killed and the variables removed from memory. The persisted data offers many advantages. We can use it to show initial data when the app starts and waits for the first batch data to be fetched from the server. It can also be used to allow for offline app usage.</p><div class="hint-container warning"><p class="hint-container-title">iOS isolates app data from other apps</p><p>For security reasons, each app is isolated from the rest of the apps. This is called sandboxing. <a href="https://medium.com/@dinesh.kachhot/different-ways-to-share-data-between-apps-de75a0a46d4a" target="_blank" rel="noopener noreferrer">This article</a> shows the different ways that allow two or more apps to share their data</p></div><p>There are many ways to persist data in SwiftUI that we cover below.</p><h3 id="userdefaults" tabindex="-1"><a class="header-anchor" href="#userdefaults"><span>UserDefaults</span></a></h3><p>It is a very simple key-value storage that persists data in a file. The API surface is very small and the developer does not need to manage the persisted file. This makes this technique very efficient for simple storage use cases. You can find a short <a href="https://www.hackingwithswift.com/books/ios-swiftui/storing-user-settings-with-userdefaults" target="_blank" rel="noopener noreferrer">guide here</a>.</p><p>Here is sample code that shows how to persist and load data.</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token class-name">UserDefaults</span><span class="token punctuation">.</span>standard<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>tapCount<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Tap&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> tapCount <span class="token operator">=</span> <span class="token class-name">UserDefaults</span><span class="token punctuation">.</span>standard<span class="token punctuation">.</span><span class="token function">integer</span><span class="token punctuation">(</span>forKey<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Tap&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="codable-saved-in-a-file" tabindex="-1"><a class="header-anchor" href="#codable-saved-in-a-file"><span><code>Codable</code> saved in a file</span></a></h3><p>A more advanced and powerful technique is to manually load and persist a <code>Codable</code> into a file. This technique is useful if you want to store complex objects (such as the state or model) in a JSON file. There are two steps in this process, the first one consists of decoding / encoding the object from / into JSON using <code>JSONDecoder().decode</code> and <code>JSONEncoder().encode</code>. The second step consists of loading / saving the encoded data and we can think of two ways to achieve this. The first one consists of user defaults&#39; <code>dataForKey:</code> to load the data and <code>setObject:ForKey</code> to persist it. Another one consists of creating and managing a file by the developer using file APIs such as <code>fileHandle.availableData</code> to load the data from a file and <code>data.write</code> to save it.</p><h3 id="swift-data" tabindex="-1"><a class="header-anchor" href="#swift-data"><span>Swift Data</span></a></h3><p>Swift Data is a framework introduced by Apple since iOS 17.0 to simplify data management in Swift applications. It inherits many concepts from Core Data (read more about Core Data below) but it is more straightforward to use.</p><p>This project shows an example of using <a href="https://github.com/worldline/ios-training/tree/main/samples/SwiftData-01.swiftpm" target="_blank" rel="noopener noreferrer">Swift Data in a SwiftUI application</a>.</p><h3 id="data-persistence-libraries" tabindex="-1"><a class="header-anchor" href="#data-persistence-libraries"><span>Data persistence libraries</span></a></h3><p>For storing data in a database or similar fashion, SQLite is available as a low level library. It is not recommended to use it unless there is a strong performance concern. Instead, it is recommended to use libraries specialized in data persistence. Some can be assimilated to an ORM library (Object Relational Mapper). The remainder of this section describes some of them.</p><div class="hint-container warning"><p class="hint-container-title">Please be careful about the pricing of cloud storage</p><p>Sophisticated databases generally provide cloud storage to provide a complete offer. If you&#39;re interested in storing data in the cloud, please take some time to read the pricing page to avoid any bad surprises when your app runs in production.</p></div><h4 id="firebase-datastore" tabindex="-1"><a class="header-anchor" href="#firebase-datastore"><span>Firebase datastore</span></a></h4><p>Firebase datastore is a cloud first database. This means that Firebase Datastore requires an internet connection to store and load the data. However, the library is simple to use and supports real time updates.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Firebase datastore is part of a bigger suite of service called Firebase. For example, we can <em>Firebase App Distribution</em> in Firebase, which is a service that allows to deploy and distribute apps without going the burden of using TestFlight.</p></div><h4 id="core-data-legacy" tabindex="-1"><a class="header-anchor" href="#core-data-legacy"><span>Core Data (legacy)</span></a></h4><p><a href="https://developer.apple.com/documentation/coredata" target="_blank" rel="noopener noreferrer">Core Data</a> is the official library to &quot;Persist or cache data on a single device, or sync data to multiple devices with CloudKit&quot;. It existed since iOS 3 and Apple continuously updates it to keep it relevant. It also has the reputation of having a steep learning curve, but it remains famous among developers.</p><p>It works similarly as an ORM where classes are mapped into tables. Xcode provides a graphical editor that allows to specify the tables, the relations and generate the necessary code (in Swift or Objective-C).</p><figure><img src="https://docs-assets.developer.apple.com/published/fbb9767e96/rendered2x-1622022015.png" alt="Core date editor" tabindex="0" loading="lazy"><figcaption>Core date editor</figcaption></figure><p>Even though Core Date existed before SwiftUI, Apple made sure that both of them can be used together. This article shows <a href="https://www.hackingwithswift.com/books/ios-swiftui/how-to-combine-core-data-and-swiftui" target="_blank" rel="noopener noreferrer">how to use Core Data in a SwiftUI project</a>.</p><h4 id="realm-atlas-device-deprecated" tabindex="-1"><a class="header-anchor" href="#realm-atlas-device-deprecated"><span>Realm / Atlas Device (deprecated)</span></a></h4><p><a href="https://realm.io/" target="_blank" rel="noopener noreferrer">Realm</a> is a high level alternative to SQLite. It can be seen as alternative to Core Data as they seem to provide a similar list of features. Most notably, the possibility to store data locally or in the cloud. The points where Realm wins is that the library seems simpler to learn and to use and that it is also available in Android.</p><h3 id="pw-complete-the-official-ios-persisting-data-tutorial" tabindex="-1"><a class="header-anchor" href="#pw-complete-the-official-ios-persisting-data-tutorial"><span>PW: complete the official iOS persisting data tutorial</span></a></h3><p>This PW shows how to save a <code>Codable</code> in a manually managed file using JSON encoder and filesystem APIs.</p><p><a href="https://developer.apple.com/tutorials/app-dev-training/persisting-data" target="_blank" rel="noopener noreferrer">https://developer.apple.com/tutorials/app-dev-training/persisting-data</a></p>`,45)])])}const c=a(o,[["render",p]]),r=JSON.parse('{"path":"/data-manipulation/","title":"Data manipulation","lang":"en-US","frontmatter":{},"git":{"updatedTime":1759496341000,"contributors":[{"name":"yostane","username":"yostane","email":"1958676+yostane@users.noreply.github.com","commits":2,"url":"https://github.com/yostane"}],"changelog":[{"hash":"78e25c1721bfbfa3e75d7b91dc08100d77b5c632","time":1759496341000,"email":"1958676+yostane@users.noreply.github.com","author":"yostane","message":"feat: Implement Swift Data example with Pokémon model and sample data"},{"hash":"415d64ed4935b52775611cd4a21bb51754136cc3","time":1759481753000,"email":"1958676+yostane@users.noreply.github.com","author":"yostane","message":"Update documentation and dependencies for iOS training"}]},"filePathRelative":"data-manipulation/README.md"}');export{c as comp,r as data};
