import{_ as a,c as t,a as s,o as i}from"./app-H6ZQ3zEr.js";const n={};function o(r,e){return i(),t("div",null,[...e[0]||(e[0]=[s('<h1 id="swift-part-1" tabindex="-1"><a class="header-anchor" href="#swift-part-1"><span>Swift (part 1)</span></a></h1><div class="hint-container tip"><p class="hint-container-title">Estimated time</p><p>1/2 day</p></div><p>Swift is the official programming language for developing iOS, iPadOS, macOS, watchOS and AppleTV apps. It can also target other platforms such as Windows, Linux and Android.</p><p>The source code of the language toolchain is hosted in <a href="https://github.com/swiftlang/swift" target="_blank" rel="noopener noreferrer">swiftlang/swift</a> GitHub repository.</p><h2 id="a-quick-tour-of-some-features" tabindex="-1"><a class="header-anchor" href="#a-quick-tour-of-some-features"><span>A quick tour of some features</span></a></h2><p>Swift has modern and interesting features. Here are some notable ones:</p><ul><li>Swift is statically typed and supports implicit typing. <ul><li><em>Static</em> typing: types cannot change on runtime (it is the opposite of dynamic typing).</li><li><em>Implicit</em> typing: the compiler can infer the type whenever possible.</li></ul></li><li><code>var</code> creates mutable variables.</li><li><code>let</code> creates immutable variables or constants.</li><li>String interpolation is available with this syntax <code>\\(expression)</code>.</li><li>Parenthesis are not required in <code>if</code>, <code>for</code>, <code>while</code> and <code>switch</code> statements.</li><li><code>if</code> and <code>switch</code> statements are expressions.</li><li>for-each is the only type of for loop available.</li><li><em>Optionals</em> allows to write code free from null pointer errors (also called Null Safety in other languages).</li><li>Functional programming is supported (Higher-order functions and functions as 1st class items, etc.).</li><li>Object oriented programming is supported.</li><li>Interfaces are called protocols and they are used a lot.</li><li>Structures are available and provide a lot of features (More on that later).</li></ul><p><a href="https://swiftfiddle.com/2382a3b3fdc54631140f51bae116dc74" target="_blank" rel="noopener noreferrer">this code</a> illustrates some of the features listed above.</p><p>In the following sections, we will delve into more features.</p><div class="hint-container tip"><p class="hint-container-title">++ and -- are removed since swift 3</p><p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md" target="_blank" rel="noopener noreferrer">This post</a> details all the problems related to using these operators.</p></div><h2 id="functions" tabindex="-1"><a class="header-anchor" href="#functions"><span>Functions</span></a></h2><p>In the this section, the terms <em>argument</em> and <em>parameter</em> are used interchangeably.</p><p>The declaration of functions in Swift has the following peculiarities:</p><ul><li>Parameters are named and ordered. This means that when you call a function, you must specify the name of the arguments in the same order as the declaration.</li><li>A parameter can have different external and internal names by declaring it like this: <code>externalName internalName: Type</code>. The external name is also called an argument label.</li><li>You can make a parameter anonymous by setting this external name: <code>_</code>.</li><li>Arguments can have a default value. These are also called optional arguments.</li></ul><p><a href="https://swiftfiddle.com/690a3e3bbe580f524f72358ccdb696da" target="_blank" rel="noopener noreferrer">This code</a> illustrates the above features.</p><p>Swift allows to use functions as first class items or citizens. This allows to store function references into variables, pass functions as arguments to other functions and return a function from a function. Here is a brief listing of the these features:</p><ul><li>A function can be assigned to a variable, passed as a function parameter or returned from a function.</li><li>A function type can be expressed as follows: <code>(typeOfParam1, typeOfParam2, etc) -&gt; returnType</code>.</li><li>The empty return type is <code>Void</code>.</li><li>We can use <code>typealias</code> to shorten writing long types.</li><li>Swift supports anonymous functions (also called lambda function) with the following syntax <code>{ argName1, argName2, etc. in // code }</code></li></ul><p><a href="https://swiftfiddle.com/5d6b837c869bf23615376bc4cc70bcd1" target="_blank" rel="noopener noreferrer">This code</a> illustrates these features.</p><p>Let&#39;s explore in the next section, one of the most amazing features of Swift which is <em>Optionals</em>.</p><h2 id="optionals-aka-null-safety" tabindex="-1"><a class="header-anchor" href="#optionals-aka-null-safety"><span>Optionals (aka. Null safety)</span></a></h2><p>In a nutshell, optionals is a compiler feature that allows you to avoid the infamous <em>Null pointer exception</em> or <em>npe</em>. The Swift compiler provides null safety and reports errors and warnings when we manipulate nullable (also called optional) values. Here is a list of null safety features provided by swift:</p><div class="hint-container tip"><p class="hint-container-title">The name of null in iOS development</p><p>In Swift, the null value is called <code>nil</code></p></div><ul><li>All types are non optional by default. This means that we cannot assign <code>nil</code> to a variable or an argument. For example, this code fails <code>var s: String = nil</code>.</li><li>A type can be made optional by suffixing it with a <em>?</em>. For example: <code>var s: String? = nil</code>.</li><li>You cannot call a method or a property of an optional type, unless you do one of those possibilities: <ul><li>Use optional chaining with the <em>?</em> suffix.</li><li>Provide a default value with the <em>??</em> operator.</li><li>Unwrap the optional so that it becomes non optional.</li><li>Force unwrap the optional using the <em>!</em> suffix. This should never be used as it bypasses compiler checks.</li></ul></li></ul><div class="hint-container caution"><p class="hint-container-title">Never unwrap with !</p><p>You must never force unwrap with the <em>!</em>. Use other unwrapping techniques instead. On of the rarest exceptions is with Interface builder&#39;s Outlets in UIKit <code>@IBOutlet var label: UILabel!</code>. Fortunately, since we are not using UIKit in this training, we will avoid this situation.</p></div><p><a href="https://swiftfiddle.com/fa7ad8713475c04666462236db939857" target="_blank" rel="noopener noreferrer">This code</a> illustrates null safety and how to use optional types.</p><h2 id="enumerations" tabindex="-1"><a class="header-anchor" href="#enumerations"><span>Enumerations</span></a></h2><p>Enumerations allow to work with a group of values in a type-safe fashion. Swift provides many interesting features to enumerations:</p><ul><li>When the compiler can infer it, you can omit the name of the enumeration when you use one of its values.</li><li>Switch statements support enumerations.</li><li>You can easily iterate over an enum&#39;s values by using <code>: CaseIterable</code>.</li><li>You can associate values or provide a raw value to enumeration cases. Raw values can be implicitly assigned.</li><li>You can use another enumeration as associated value, this is called <em>recursive enumeration</em>.</li></ul><p><a href="https://swiftfiddle.com/d508deb3493e9b572eaf00891c91d8f0" target="_blank" rel="noopener noreferrer">This code</a> illustrates some enumeration features. For further reading please consult <a href="https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html" target="_blank" rel="noopener noreferrer">the official documentation</a>.</p><h2 id="error-management" tabindex="-1"><a class="header-anchor" href="#error-management"><span>Error management</span></a></h2><p>Swift provides two ways for error management: <em>Exceptions</em> and the <em>Result</em> type.</p><ul><li>Exceptions provide an alternate return route with the <code>throw [value]</code> keyword. <ul><li>The thrown value must conform the <code>Error</code> protocol. We can even throw a <a href="https://www.hackingwithswift.com/example-code/language/how-to-throw-errors-using-strings" target="_blank" rel="noopener noreferrer">String</a> that way.</li><li>We must call <code>throw</code> when we want to return an error. Throwing in a normal situation is a bad practice.</li><li>We say that a function <em>throws</em> when it can <code>throw</code> and exception. It must have the <code>throws</code> qualifier.</li><li>When we call a function that throws, we must precede the call with <code>try</code> keyword</li><li>When we call a function that throws, we can either propagate its error if it is thrown or handle to stop its propagation.</li></ul></li><li>The <code>Result</code> type is a an enum that has two possible cases: <code>success(Sucess)</code> or <code>failure(Failure)</code><ul><li>The failure value must conform to the <code>Error</code> protocol</li><li>A <code>Result</code> can be handled with usual Swift features for enums: <code>guard</code>, <code>switch</code>, etc.</li><li>The <code>Result</code> type has can be used with the exception style. Its <code>get()</code> method returns the success value or throws the error.</li></ul></li></ul><p><a href="https://swiftfiddle.com/84b40a652f2b31c0b9cd1e0b37b15ca0" target="_blank" rel="noopener noreferrer">This code</a> illustrates error handling features.</p><h2 id="some-features-in-bulk" tabindex="-1"><a class="header-anchor" href="#some-features-in-bulk"><span>Some features in bulk</span></a></h2><ul><li>Swift has 3 collection types out of the box: Array, Dictionary and Set. They are illustrated in <a href="https://swiftfiddle.com/78907b9238bd580e90c9f4b3732e26be" target="_blank" rel="noopener noreferrer">this code</a></li><li>We can use tuples in Swift as shown in <a href="https://swiftfiddle.com/507224875d91da9c6257e2e86533b360" target="_blank" rel="noopener noreferrer">this example</a></li></ul><h2 id="exercises" tabindex="-1"><a class="header-anchor" href="#exercises"><span>Exercises</span></a></h2><h3 id="exercise-1" tabindex="-1"><a class="header-anchor" href="#exercise-1"><span>Exercise 1</span></a></h3><p><a href="https://swiftfiddle.com/6a40668c99d1e2cf079be7525548ca60" target="_blank" rel="noopener noreferrer">Please click on this link to view the exercise</a></p><details class="hint-container details"><summary>Please open to see the solution(s)</summary><p><a href="https://swiftfiddle.com/4e97fc9476694424b0fbab6dd8118c35" target="_blank" rel="noopener noreferrer">Solution</a></p></details><h3 id="exercise-2" tabindex="-1"><a class="header-anchor" href="#exercise-2"><span>Exercise 2</span></a></h3><p><a href="https://swiftfiddle.com/0e980f44cf6855c63f3a9ce772872dde" target="_blank" rel="noopener noreferrer">Please click on this link to view the exercise</a></p><details class="hint-container details"><summary>Please open to see the solution(s)</summary><p><a href="https://swiftfiddle.com/1bb9a747f719e0f35ca470c079a1e453" target="_blank" rel="noopener noreferrer">Solution</a></p></details><h3 id="exercise-3" tabindex="-1"><a class="header-anchor" href="#exercise-3"><span>Exercise 3</span></a></h3><p><a href="https://swiftfiddle.com/2a603ce22c3edc9a2bc0cee8bb65885d" target="_blank" rel="noopener noreferrer">Please click on this link to view the exercise</a></p><details class="hint-container details"><summary>Please open to see the solution(s)</summary><p><a href="https://swiftfiddle.com/e3c6f484bffcc5945db5dd43ebc11c84" target="_blank" rel="noopener noreferrer">Solution</a></p></details><h2 id="sources" tabindex="-1"><a class="header-anchor" href="#sources"><span>Sources</span></a></h2><ul><li><a href="https://docs.swift.org" target="_blank" rel="noopener noreferrer">Swift official documentation</a>.</li></ul>',47)])])}const c=a(n,[["render",o]]),d=JSON.parse('{"path":"/swift-part1/","title":"Swift (part 1)","lang":"en-US","frontmatter":{},"git":{"updatedTime":1719253649000,"contributors":[{"name":"yassine benabbas (a527524)","username":"","email":"yassine.benabbas@worldline.com","commits":3},{"name":"Yassine Benabbas","username":"","email":"yassine.benabbas@worldline.com","commits":17},{"name":"YBE WL","username":"","email":"yassine.benabbas@worldline.com","commits":3},{"name":"yostane","username":"yostane","email":"1958676+yostane@users.noreply.github.com","commits":5,"url":"https://github.com/yostane"}],"changelog":[{"hash":"56b8e0f1240d63abf9c02020f66a3d1225e3e421","time":1719253649000,"email":"1958676+yostane@users.noreply.github.com","author":"yostane","message":"Add links to Swift documentation in \\"to-go-further\\" section"},{"hash":"9c2207ce10aa08795ec965af337d076116f9d945","time":1719246851000,"email":"1958676+yostane@users.noreply.github.com","author":"yostane","message":"Update Swift version to 5.10 in documentation and remove FR translation"},{"hash":"016782ed455ea98a750c08a0d04e8bf57621ef4c","time":1701084701000,"email":"yassine.benabbas@worldline.com","author":"Yassine Benabbas","message":"Add solution to part1 ex3"},{"hash":"d01bed87626b9d0fe51c70c3fff52191ee510846","time":1700997195000,"email":"1958676+yostane@users.noreply.github.com","author":"yostane","message":"Added collections and tuples"},{"hash":"bc4a39a972c7b8edb19ae5589ff7db45f747a6bc","time":1700956464000,"email":"1958676+yostane@users.noreply.github.com","author":"yostane","message":"Add error handling chapter"},{"hash":"b07741d623432d93bf2a939414203c4b5363abdc","time":1700585939000,"email":"1958676+yostane@users.noreply.github.com","author":"yostane","message":"Update libs and sample"},{"hash":"0fd52d21f4fb092a4d23fbf76f6bb0145a04922d","time":1660896201000,"email":"yassine.benabbas@worldline.com","author":"Yassine Benabbas","message":"Fix words"},{"hash":"0af1ab0ad6f3c03377ffd9a816aa63fd67f8f3cd","time":1660837622000,"email":"yassine.benabbas@worldline.com","author":"Yassine Benabbas","message":"Traduction FR"},{"hash":"6206c4fb63f68fcb7be786c37d74534d9bc509e4","time":1660750594000,"email":"yassine.benabbas@worldline.com","author":"Yassine Benabbas","message":"Global review"},{"hash":"06f5daf106c67486895489b23a267d8decd656bd","time":1660665550000,"email":"yassine.benabbas@worldline.com","author":"Yassine Benabbas","message":"Many fixes and improvements"},{"hash":"91cd48cbbf5a71e2e2c24bff7ec8acb9eca7d816","time":1660636896000,"email":"yassine.benabbas@worldline.com","author":"Yassine Benabbas","message":"fix folder names and styling"},{"hash":"16479f8cc530b22aa0d67a4a460e167e841a5daa","time":1660227378000,"email":"yassine.benabbas@worldline.com","author":"Yassine Benabbas","message":"Use gist instead of jdoodle"},{"hash":"556aa2aeb45975941f4e772d3c26e26a86d7de33","time":1659975189000,"email":"yassine.benabbas@worldline.com","author":"Yassine Benabbas","message":"Update content"},{"hash":"05b588e877193fca399bc09aa01be62f016164c6","time":1659720149000,"email":"yassine.benabbas@worldline.com","author":"Yassine Benabbas","message":"Added search box and some exercises"},{"hash":"8eca6cd2e8286a78dc4e1c4747ddda3d667f69ae","time":1659541894000,"email":"yassine.benabbas@worldline.com","author":"YBE WL","message":"Added an exercise"},{"hash":"c18d66174629c4245d9b1f42dbc5372c039bc60e","time":1659541068000,"email":"yassine.benabbas@worldline.com","author":"YBE WL","message":"More updates to the training"},{"hash":"d6a5db1b1b2f55edebb00dbf81fef71f32934c68","time":1659109907000,"email":"yassine.benabbas@worldline.com","author":"YBE WL","message":"update swift part"},{"hash":"75b496de19b49b75ef8aba9947322140d5755b53","time":1658846550000,"email":"yassine.benabbas@worldline.com","author":"Yassine Benabbas","message":"More updates to the training"},{"hash":"960655300c592666b563e3fe4f1712d2fbf3be2a","time":1637090316000,"email":"yassine.benabbas@worldline.com","author":"Yassine Benabbas","message":"Finished functional programming part"},{"hash":"15484a71fd27ab683db1b30d4223e012e0f8c0ec","time":1637057624000,"email":"yassine.benabbas@worldline.com","author":"Yassine Benabbas","message":"Update to vuepress 2 beta"},{"hash":"5cefa41d59b73c25f0d14e39abecdb15115cf7dd","time":1636739090000,"email":"yassine.benabbas@worldline.com","author":"Yassine Benabbas","message":"Some work on oop part"},{"hash":"2075a2fe240ec2050855ce2ce5829dc1ded5e9a2","time":1633342376000,"email":"yassine.benabbas@worldline.com","author":"Yassine Benabbas","message":"Added enumerations"},{"hash":"a24c2b908f4ab5a84f7a40f6cf7781c47e5ee68d","time":1633018247000,"email":"yassine.benabbas@worldline.com","author":"Yassine Benabbas","message":"Start working on null safety"},{"hash":"06d1d006ce695ad9df6848bc98a84e1ac7ff7ecc","time":1632831533000,"email":"yassine.benabbas@worldline.com","author":"Yassine Benabbas","message":"Updated functions part in swift chaprter"},{"hash":"72d10951bab712ef250428b0dea6e835e72fb506","time":1632821661000,"email":"yassine.benabbas@worldline.com","author":"Yassine Benabbas","message":"Fix some typos"},{"hash":"6d28e797d9d2ae510b2fda597cbff03a1ec8878b","time":1628846851000,"email":"yassine.benabbas@worldline.com","author":"yassine benabbas (a527524)","message":"Added some text to functions and try to change url of favicon"},{"hash":"d55c263b17f77b593b70ae73e86b09a1288337b8","time":1628265673000,"email":"yassine.benabbas@worldline.com","author":"yassine benabbas (a527524)","message":"started swift chapter and updated styles"},{"hash":"e4213ce5dbef3b1a9f5df87188dcd847aaaad1bf","time":1624877075000,"email":"yassine.benabbas@worldline.com","author":"yassine benabbas (a527524)","message":"First commit"}]},"filePathRelative":"swift-part1/README.md"}');export{c as comp,d as data};
